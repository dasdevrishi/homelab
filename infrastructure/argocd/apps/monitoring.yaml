apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  # This Application resource itself lives in the argocd namespace
  name: monitoring
  namespace: argocd
  # Ensures this app is deleted cleanly when the root app is deleted
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default

  # Source of the Helm chart for kube-prometheus-stack
  source:
    # The Helm repository where the chart is located
    repoURL: https://prometheus-community.github.io/helm-charts
    # The name of the chart
    chart: kube-prometheus-stack
    # The version of the chart to use (optional, but recommended for stability)
    # Find the latest version suitable for you, e.g., check Artifact Hub
    targetRevision: 70.4.1 # Example version, please update as needed

    helm:
      values: |
        prometheus:
          prometheusSpec:
            retention: 30d
            resources:
              requests:
                memory: 256Mi
                cpu: 100m
              limits:
                memory: 512Mi
                cpu: 500m
            storageSpec:
              volumeClaimTemplate:
                spec:
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 5Gi

        alertmanager:
          alertmanagerSpec:
            resources:
              requests:
                memory: 64Mi
                cpu: 50m
              limits:
                memory: 128Mi
                cpu: 100m
            storage:
              volumeClaimTemplate:
                spec:
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 1Gi

        grafana:
          persistence:
            enabled: true
            size: 2Gi
          resources:
            requests:
              memory: 128Mi
              cpu: 100m
            limits:
              memory: 256Mi
              cpu: 200m
          adminPassword: "Dev5rishi"
          service:
            type: LoadBalancer
            port: 80
            targetPort: 3000
            nodePort: 30080

  # Destination where the monitoring stack will be deployed
  destination:
    server: https://kubernetes.default.svc # Target the same cluster
    namespace: monitoring                 # Deploy into the 'monitoring' namespace

  # Sync policy: Automatic sync, prune resources, self-heal
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      # Ensure the 'monitoring' namespace is created if it doesn't exist
      - CreateNamespace=true
      # Allow deletion of resources when Helm chart changes require it
      - RespectIgnoreDifferences=true
      - ApplyOutOfSyncOnly=true